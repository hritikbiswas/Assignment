Let and Const Keywords and Their Use Cases:

let is used to declare block-scoped variables that can be reassigned.
const is used to declare block-scoped variables that cannot be reassigned.
javascript
Copy code
let count = 10;
count = 20; // Valid

const pi = 3.14;
pi = 3.15; // Error
Arrow Functions:

Arrow functions are a concise way to write functions in JavaScript. They have a shorter syntax and capture the this value from the surrounding context.

javascript
Copy code
// Traditional function
function add(a, b) {
    return a + b;
}

// Arrow function
const add = (a, b) => a + b;
Template Literals:

Template literals allow you to embed expressions within string literals using ${}.

javascript
Copy code
const name = 'Alice';
const greeting = `Hello, ${name}!`;
Default Parameters:

Default parameters allow you to set default values for function parameters if no value or undefined is provided.

javascript
Copy code
function greet(name = 'User') {
    console.log(`Hello, ${name}!`);
}
For...of Loop:

The for...of loop iterates over the values of an iterable (e.g., an array, string, or Set).

javascript
Copy code
const fruits = ['apple', 'banana', 'cherry'];
for (const fruit of fruits) {
    console.log(fruit);
}
Object and Array Destructuring:

Destructuring allows you to extract values from objects and arrays into variables.

javascript
Copy code
const person = { name: 'John', age: 30 };
const { name, age } = person;

const numbers = [1, 2, 3];
const [a, b, c] = numbers;
Rest Parameter:

The rest parameter allows you to collect multiple function arguments into a single array parameter.

javascript
Copy code
function sum(...numbers) {
    return numbers.reduce((acc, val) => acc + val, 0);
}
Spread Operator:

The spread operator allows you to spread elements of an iterable (e.g., an array) into another array or object.

javascript
Copy code
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];

const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 };
Classes:

ES6 introduced class syntax for creating objects and implementing inheritance.

javascript
Copy code
class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`${this.name} makes a sound.`);
    }
}

class Dog extends Animal {
    speak() {
        console.log(`${this.name} barks.`);
    }
}

const myDog = new Dog('Buddy');
myDog.speak();
